╔═══════════════════════════════════════════════════════════════════╗
║                    RENDEREASE PROJECT MAP                          ║
║           Interior Design Visualization Tool                      ║
╚═══════════════════════════════════════════════════════════════════╝

📍 START HERE: START_HERE.md  ← Read this first!

═══════════════════════════════════════════════════════════════════

🚀 GETTING STARTED

  1. Install      → ./manual-setup.sh
  2. Run          → ./run-all.sh  
  3. Open Browser → http://localhost:3000

═══════════════════════════════════════════════════════════════════

📚 DOCUMENTATION GUIDE

  For Quick Start:
  ├─ START_HERE.md ............... Main entry point (you are here!)
  ├─ QUICK_REFERENCE.md .......... Command cheat sheet
  └─ TROUBLESHOOTING.md .......... Fix common issues

  For Setup:
  ├─ SETUP_GUIDE.md .............. Detailed installation guide
  └─ manual-setup.sh ............. Best installation script

  For Understanding:
  ├─ NEW_README.md ............... Complete documentation
  ├─ PROJECT_STRUCTURE.txt ....... File layout
  └─ PROJECT_SUMMARY.md .......... Project overview

  Legacy (Original Version):
  ├─ README.md ................... Vanilla JS version docs
  └─ QUICKSTART.md ............... Old quick start

═══════════════════════════════════════════════════════════════════

🛠️ SCRIPTS

  Setup:
  ├─ setup.sh .................... Automated setup
  └─ manual-setup.sh ............. Manual setup (recommended)

  Running:
  ├─ run-all.sh .................. Start backend + frontend
  ├─ run-backend.sh .............. Backend only (port 5000)
  └─ run-frontend.sh ............. Frontend only (port 3000)

  Legacy:
  └─ start.sh .................... Original vanilla JS server

═══════════════════════════════════════════════════════════════════

💻 SOURCE CODE

  Backend (Python/Flask):
  backend/
  ├─ app.py ...................... Flask API server
  ├─ requirements.txt ............ Python dependencies
  └─ cv_algorithms/
     ├─ edge_detector.py ......... Canny, Sobel, Laplacian
     ├─ hough_transform.py ....... Line & circle detection
     ├─ segmentation.py .......... Color, GrabCut, Watershed
     ├─ homography.py ............ Perspective transforms
     └─ texture_generator.py ..... Procedural textures

  Frontend (React):
  frontend/
  ├─ package.json ................ Node dependencies
  └─ src/
     ├─ App.js ................... Main application
     ├─ services/
     │  └─ api.js ................ Backend API calls
     └─ components/
        ├─ ImageUploader.js ...... Image upload UI
        ├─ Canvas.js ............. Display & selection
        ├─ TextureLibrary.js ..... Texture grid
        └─ Controls.js ........... Settings panel

  Legacy (Vanilla JS):
  ├─ index.html .................. Original HTML
  ├─ app.js ...................... Original JavaScript
  └─ styles.css .................. Original CSS

═══════════════════════════════════════════════════════════════════

🔧 CONFIGURATION

  backend/.env
  ├─ FLASK_APP=app.py
  ├─ FLASK_ENV=development
  └─ FLASK_DEBUG=1

  frontend/.env
  └─ REACT_APP_API_URL=http://localhost:5000/api

═══════════════════════════════════════════════════════════════════

📡 API ARCHITECTURE

  Frontend (React)                Backend (Flask)
  ┌──────────────┐               ┌──────────────┐
  │  Port 3000   │◄──REST API───►│  Port 5000   │
  │              │               │              │
  │ - Upload UI  │               │ - /api/health│
  │ - Canvas     │               │ - /api/edge  │
  │ - Textures   │               │ - /api/lines │
  │ - Controls   │               │ - /api/segment│
  └──────────────┘               │ - /api/texture│
                                 └───────┬────────┘
                                         │
                          ┌──────────────┴───────────────┐
                          │   CV Algorithms (OpenCV)     │
                          │                              │
                          │ - Edge Detection             │
                          │ - Hough Transform            │
                          │ - Segmentation               │
                          │ - Homography                 │
                          │ - Texture Generation         │
                          └──────────────────────────────┘

═══════════════════════════════════════════════════════════════════

🎨 FEATURES

  ✅ Image Upload         ✅ 12+ Textures
  ✅ Edge Detection       ✅ Hough Transform
  ✅ Segmentation         ✅ Homography
  ✅ Real-time Preview    ✅ Export PNG
  ✅ Blend Modes          ✅ Adjustments

═══════════════════════════════════════════════════════════════════

🏃 QUICK COMMANDS

  # Setup (first time)
  ./manual-setup.sh

  # Run application
  ./run-all.sh

  # Test backend
  curl http://localhost:5000/api/health

  # Reset everything
  rm -rf backend/venv frontend/node_modules
  ./manual-setup.sh

═══════════════════════════════════════════════════════════════════

🆘 HAVING ISSUES?

  1. Read TROUBLESHOOTING.md
  2. Try ./manual-setup.sh
  3. Check SETUP_GUIDE.md
  4. Contact team:
     - puvvala@wisc.edu
     - shukla35@wisc.edu
     - jsun424@wisc.edu

═══════════════════════════════════════════════════════════════════

👥 TEAM

  Bhinu Puvva      puvvala@wisc.edu
  Bala Shukla      shukla35@wisc.edu
  Rain Jiayu Sun   jsun424@wisc.edu

  COMP SCI 566 - Intro to Computer Vision
  University of Wisconsin-Madison

═══════════════════════════════════════════════════════════════════

📊 PROJECT STATUS: ✅ Phase 1-2 Complete | 🔄 Phase 3 In Progress

═══════════════════════════════════════════════════════════════════

🎉 READY TO START? → ./manual-setup.sh && ./run-all.sh

