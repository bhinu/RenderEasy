{"ast":null,"code":"/**\n * API Service for RenderEase Backend\n */\n\nimport axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 30000 // 30 seconds\n});\nexport const apiService = {\n  // Health check\n  healthCheck: async () => {\n    const response = await api.get('/health');\n    return response.data;\n  },\n  // Edge detection\n  detectEdges: async (imageData, method = 'canny', params = {}) => {\n    const response = await api.post('/edge-detection', {\n      image: imageData,\n      method,\n      params\n    });\n    return response.data;\n  },\n  // Line detection (Hough Transform)\n  detectLines: async (imageData, edgeData = null, params = {}) => {\n    const response = await api.post('/detect-lines', {\n      image: imageData,\n      edges: edgeData,\n      params\n    });\n    return response.data;\n  },\n  // Image segmentation\n  segmentImage: async (imageData, method = 'color', params = {}) => {\n    const response = await api.post('/segment', {\n      image: imageData,\n      method,\n      params\n    });\n    return response.data;\n  },\n  // Generate texture\n  generateTexture: async (type, width, height, params = {}) => {\n    const response = await api.post('/generate-texture', {\n      type,\n      width,\n      height,\n      params\n    });\n    return response.data;\n  },\n  // Apply texture to image\n  applyTexture: async (imageData, textureData, corners, blendAlpha = 0.8, brightness = 0) => {\n    const response = await api.post('/apply-texture', {\n      image: imageData,\n      texture: textureData,\n      corners,\n      blend_alpha: blendAlpha,\n      brightness\n    });\n    return response.data;\n  },\n  // Detect surfaces automatically\n  detectSurfaces: async imageData => {\n    const response = await api.post('/detect-surfaces', {\n      image: imageData\n    });\n    return response.data;\n  },\n  // Complete processing pipeline\n  processComplete: async (imageData, textureType, options = {}) => {\n    const response = await api.post('/process-complete', {\n      image: imageData,\n      texture_type: textureType,\n      ...options\n    });\n    return response.data;\n  }\n};\n\n// Helper function to convert File to base64\nexport const fileToBase64 = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n  });\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","timeout","apiService","healthCheck","response","get","data","detectEdges","imageData","method","params","post","image","detectLines","edgeData","edges","segmentImage","generateTexture","type","width","height","applyTexture","textureData","corners","blendAlpha","brightness","texture","blend_alpha","detectSurfaces","processComplete","textureType","options","texture_type","fileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error"],"sources":["/Users/chief/Projects and Codes/566 Final Project/frontend/src/services/api.js"],"sourcesContent":["/**\n * API Service for RenderEase Backend\n */\n\nimport axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  timeout: 30000, // 30 seconds\n});\n\nexport const apiService = {\n  // Health check\n  healthCheck: async () => {\n    const response = await api.get('/health');\n    return response.data;\n  },\n\n  // Edge detection\n  detectEdges: async (imageData, method = 'canny', params = {}) => {\n    const response = await api.post('/edge-detection', {\n      image: imageData,\n      method,\n      params,\n    });\n    return response.data;\n  },\n\n  // Line detection (Hough Transform)\n  detectLines: async (imageData, edgeData = null, params = {}) => {\n    const response = await api.post('/detect-lines', {\n      image: imageData,\n      edges: edgeData,\n      params,\n    });\n    return response.data;\n  },\n\n  // Image segmentation\n  segmentImage: async (imageData, method = 'color', params = {}) => {\n    const response = await api.post('/segment', {\n      image: imageData,\n      method,\n      params,\n    });\n    return response.data;\n  },\n\n  // Generate texture\n  generateTexture: async (type, width, height, params = {}) => {\n    const response = await api.post('/generate-texture', {\n      type,\n      width,\n      height,\n      params,\n    });\n    return response.data;\n  },\n\n  // Apply texture to image\n  applyTexture: async (imageData, textureData, corners, blendAlpha = 0.8, brightness = 0) => {\n    const response = await api.post('/apply-texture', {\n      image: imageData,\n      texture: textureData,\n      corners,\n      blend_alpha: blendAlpha,\n      brightness,\n    });\n    return response.data;\n  },\n\n  // Detect surfaces automatically\n  detectSurfaces: async (imageData) => {\n    const response = await api.post('/detect-surfaces', {\n      image: imageData,\n    });\n    return response.data;\n  },\n\n  // Complete processing pipeline\n  processComplete: async (imageData, textureType, options = {}) => {\n    const response = await api.post('/process-complete', {\n      image: imageData,\n      texture_type: textureType,\n      ...options,\n    });\n    return response.data;\n  },\n};\n\n// Helper function to convert File to base64\nexport const fileToBase64 = (file) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = (error) => reject(error);\n  });\n};\n\nexport default apiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}